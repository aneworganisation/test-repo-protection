name: Setup Branch Protection & Naming Rules

on:
  workflow_dispatch:

permissions:
  contents: write          # commit the branch-name check workflow
  pull-requests: write

jobs:
  protect-and-configure:
    runs-on: ubuntu-latest

    steps:
      - name: Get repo coordinates
        id: coords
        run: |
          REPO="${GITHUB_REPOSITORY##*/}"
          OWNER="${GITHUB_REPOSITORY%/*}"
          echo "repo=$REPO" >> $GITHUB_OUTPUT
          echo "owner=$OWNER" >> $GITHUB_OUTPUT

      - name: Get repository ID (GraphQL)
        id: repo
        uses: actions/github-script@v7
        with:
          script: |
            const q = `
              query($owner:String!, $name:String!){
                repository(owner:$owner, name:$name){ id }
              }
            `;
            const res = await github.graphql(q, {
              owner: process.env.GITHUB_REPOSITORY.split('/')[0],
              name:  process.env.GITHUB_REPOSITORY.split('/')[1],
            });
            core.setOutput('id', res.repository.id);

      # ---- Branch protection: main ----
      - name: Protect main with PR rules (GraphQL)
        uses: actions/github-script@v7
        with:
          script: |
            const mutation = `
              mutation($repositoryId: ID!) {
                createBranchProtectionRule(input:{
                  repositoryId: $repositoryId
                  pattern: "main"
                  requiresApprovingReviews: true
                  requiredApprovingReviewCount: 2
                  dismissesStaleReviews: true
                  requiresCodeOwnerReviews: true
                  requiresStatusChecks: true
                  requiresStrictStatusChecks: true
                  requiredStatusCheckContexts: [
                    "build","unit-tests","lint","sast","coverage"
                  ]
                  requiresConversationResolution: true
                  requiresCommitSignatures: true
                  isAdminEnforced: true
                  allowsForcePushes: false
                  allowsDeletions: false
                }) { branchProtectionRule { id } }
              }
            `;
            await github.graphql(mutation, { repositoryId: '${{ steps.repo.outputs.id }}' });

      # ---- Branch protection: release/* pattern ----
      - name: Protect release/* with PR rules (GraphQL)
        uses: actions/github-script@v7
        with:
          script: |
            const mutation = `
              mutation($repositoryId: ID!) {
                createBranchProtectionRule(input:{
                  repositoryId: $repositoryId
                  pattern: "release/*"
                  requiresApprovingReviews: true
                  requiredApprovingReviewCount: 1
                  dismissesStaleReviews: true
                  requiresCodeOwnerReviews: true
                  requiresStatusChecks: true
                  requiresStrictStatusChecks: true
                  requiredStatusCheckContexts: [
                    "build","unit-tests","lint","sast","coverage"
                  ]
                  requiresConversationResolution: true
                  requiresCommitSignatures: true
                  isAdminEnforced: true
                  allowsForcePushes: false
                  allowsDeletions: false
                }) { branchProtectionRule { id } }
              }
            `;
            await github.graphql(mutation, { repositoryId: '${{ steps.repo.outputs.id }}' });

      # ---- Optional: protect release tags like v* from being moved ----
      - name: Protect release tags v*
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          OWNER="${{ steps.coords.outputs.owner }}"
          REPO="${{ steps.coords.outputs.repo }}"
          gh api \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            "/repos/$OWNER/$REPO/tags/protection" \
            -f pattern='v*' || true

      # ---- Commit a lightweight branch-name enforcement workflow ----
      - name: Write branch-name check workflow
        run: |
          mkdir -p .github/workflows
          cat > .github/workflows/branch-name-check.yml <<'WF'
          name: Branch name check
          on:
            create:
            push:
              branches-ignore:
                - main
                - 'release/*'
          jobs:
            enforce:
              runs-on: ubuntu-latest
              steps:
                - name: Validate branch name
                  run: |
                    BRANCH="${GITHUB_REF_NAME}"
                    # Allowed prefixes: feat, fix, hotfix, chore, refactor, docs, test, perf, build, ci, revert
                    # Format: <type>/<kebab-or-snake-or-dotted>
                    PATTERN='^(feat|fix|hotfix|chore|refactor|docs|test|perf|build|ci|revert)\/[a-z0-9._-]+$'
                    if [[ "$BRANCH" =~ ^(main|release\/.+)$ ]]; then
                      echo "Skipping enforcement for $BRANCH"
                      exit 0
                    fi
                    if [[ "$BRANCH" =~ $PATTERN ]]; then
                      echo "Branch name OK: $BRANCH"
                    else
                      echo "❌ Branch name '$BRANCH' does not match:
                      $PATTERN

                      Examples:
                        feat/add-login
                        fix/null-pointer
                        hotfix/rollback-v123
                        docs/readme-update
                      " >&2
                      exit 1
                    fi
          WF

      - name: Commit branch-name check workflow
        env:
          GH_EMAIL: actions@users.noreply.github.com
          GH_NAME: github-actions
        run: |
          if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
            git init
            git checkout -b temp-setup
          fi
          git config user.email "$GH_EMAIL"
          git config user.name "$GH_NAME"
          git add .github/workflows/branch-name-check.yml
          git commit -m "chore: add branch name enforcement workflow"
          # Use the repo's default branch, usually 'main'
          DEFAULT_BRANCH="${GITHUB_REF_NAME:-main}"
          git branch -M "$DEFAULT_BRANCH" || true
          git remote add origin "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${GITHUB_REPOSITORY}.git" || true
          git push -u origin "$DEFAULT_BRANCH"
