name: Setup Branch Protection & Naming (PAT only)

on:
  workflow_dispatch:

jobs:
  protect-and-configure:
    runs-on: ubuntu-latest
    env:
      OWNER: ${{ github.repository_owner }}
      REPO: ${{ github.event.repository.name }}
      ADMIN_TOKEN: ${{ secrets.REPO_ADMIN_TOKEN }}

    steps:
      - name: Preflight — verify PAT & repo access
        env:
          GH_TOKEN: ${{ env.ADMIN_TOKEN }}
        run: |
          test -n "$GH_TOKEN" || { echo "❌ Missing REPO_ADMIN_TOKEN secret"; exit 1; }
          gh api /user >/dev/null || { echo "❌ PAT invalid/expired"; exit 1; }
          gh api "/repos/$OWNER/$REPO" >/dev/null || {
            echo "❌ PAT cannot access $OWNER/$REPO. Ensure PAT resource owner = your org, repo selected, and SSO authorized.";
            exit 1; }
          echo "✅ PAT can access $OWNER/$REPO"

      # --- Protect 'main' via REST (no rulesets) ---
      - name: Protect main (PRs, 2 approvals, CODEOWNERS, strict checks; admins enforced)
        env:
          GH_TOKEN: ${{ env.ADMIN_TOKEN }}
        run: |
          gh api --method PUT -H "Accept: application/vnd.github+json" \
            "/repos/$OWNER/$REPO/branches/main/protection" \
            -f enforce_admins=true \
            -f allow_force_pushes=false \
            -f allow_deletions=false \
            -f required_status_checks.strict=true \
            -f required_status_checks.contexts[]="build" \
            -f required_status_checks.contexts[]="unit-tests" \
            -f required_status_checks.contexts[]="lint" \
            -f required_status_checks.contexts[]="sast" \
            -f required_status_checks.contexts[]="coverage" \
            -F required_pull_request_reviews='{"dismiss_stale_reviews":true,"require_code_owner_reviews":true,"required_approving_review_count":2,"require_last_push_approval":false}' \
            -F restrictions='null'

      - name: Enable required signed commits on main
        env:
          GH_TOKEN: ${{ env.ADMIN_TOKEN }}
        run: |
          gh api -X POST -H "Accept: application/vnd.github+json" \
            "/repos/$OWNER/$REPO/branches/main/protection/required_signatures" || {
              echo "ℹ️ If your plan/policy blocks signed-commit enforcement, this may 404/422."; }

      # --- Wildcard protection for release/* via GraphQL (branch protection rule) ---
      - name: Get repository ID (GraphQL via PAT)
        id: repo
        uses: actions/github-script@v7
        with:
          github-token: ${{ env.ADMIN_TOKEN }}
          script: |
            const q = `query($owner:String!,$name:String!){
              repository(owner:$owner, name:$name){ id }
            }`;
            const { repository } = await github.graphql(q, {
              owner: process.env.OWNER,
              name:  process.env.REPO,
            });
            core.setOutput('id', repository.id);

      - name: Create branch protection rule for release/*
        uses: actions/github-script@v7
        with:
          github-token: ${{ env.ADMIN_TOKEN }}
          script: |
            const mutation = `
              mutation($repositoryId:ID!) {
                createBranchProtectionRule(input:{
                  repositoryId: $repositoryId
                  pattern: "release/*"
                  isAdminEnforced: true
                  allowsDeletions: false
                  allowsForcePushes: false
                  requiresApprovingReviews: true
                  requiredApprovingReviewCount: 1
                  requiresCodeOwnerReviews: true
                  dismissesStaleReviews: true
                  requiresStatusChecks: true
                  requiresStrictStatusChecks: true
                  requiredStatusCheckContexts: ["build","unit-tests","lint","sast","coverage"]
                  requiresConversationResolution: true
                }) { branchProtectionRule { id } }
              }`;
            await github.graphql(mutation, { repositoryId: '${{ steps.repo.outputs.id }}' });

      # --- Protect release tags v* (cannot be moved) ---
      - name: Protect tags v*
        env:
          GH_TOKEN: ${{ env.ADMIN_TOKEN }}
        run: |
          gh api -X POST -H "Accept: application/vnd.github+json" \
            "/repos/$OWNER/$REPO/tags/protection" \
            -f pattern='v*' || true

      # --- Commit a branch-naming enforcement workflow ---
      - name: Check out repo (use PAT to push)
        uses: actions/checkout@v4
        with:
          token: ${{ env.ADMIN_TOKEN }}

      - name: Add branch-name enforcement workflow
        run: |
          mkdir -p .github/workflows
          cat > .github/workflows/branch-name-check.yml <<'WF'
          name: Branch name check
          on:
            create:
            push:
              branches-ignore:
                - main
                - 'release/*'
          jobs:
            enforce:
              runs-on: ubuntu-latest
              steps:
                - name: Validate branch name
                  run: |
                    BRANCH="${GITHUB_REF_NAME}"
                    # Allowed: feat/, fix/, hotfix/, chore/, refactor/, docs/, test/, perf/, build/, ci/, revert/
                    PATTERN='^(feat|fix|hotfix|chore|refactor|docs|test|perf|build|ci|revert)\/[a-z0-9._-]+$'
                    if [[ "$BRANCH" =~ ^(main|release\/.+)$ ]]; then
                      echo "Skipping enforcement for $BRANCH"; exit 0; fi
                    if [[ "$BRANCH" =~ $PATTERN ]]; then
                      echo "Branch name OK: $BRANCH"
                    else
                      echo "❌ Branch name '$BRANCH' does not match: $PATTERN
                      Examples:
                        feat/add-login
                        fix/null-pointer
                        hotfix/rollback-v123
                        docs/readme-update" >&2
                      exit 1
                    fi
          WF
          git add .github/workflows/branch-name-check.yml
          git -c user.name="github-actions" -c user.email="actions@users.noreply.github.com" \
            commit -m "chore: add branch name enforcement workflow" || echo "No changes"
          git push origin HEAD:main
